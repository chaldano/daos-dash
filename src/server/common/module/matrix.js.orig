import * as d3 from "d3";
import _ from 'lodash';

function adjacency(nodes, edges) {
    //var PromiseWrapper = d => new Promise(resolve => d3.csv(d, p => resolve(p)))
    //    Promise.all([PromiseWrapper("nodelist.csv"),
    //           PromiseWrapper("edgelist.csv")])
    //        .then(resolve => {
    //          createAdjacencyMatrix(resolve[0], resolve[1])                 
    //        })
    createAdjacencyMatrix(nodes, edges)
    function createAdjacencyMatrix(nodes, edges) {
        var edgeHash = {};
        edges.forEach(edge => {
            var id = edge.source + "-" + edge.target;
            edgeHash[id] = edge;
        })
        var matrix = [];
        nodes.forEach((source, a) => {
            nodes.forEach((target, b) => {
                var grid =
                {
                    id: source.id + "-" + target.id,
                    x: b, y: a, weight: 0
                };
                if (edgeHash[grid.id]) {
                    grid.weight = edgeHash[grid.id].weight;
                }
                matrix.push(grid);
            })
        })
        d3.select("svg")
            .append("g")
            .attr("transform", "translate(150,150)")
            .attr("id", "adjacencyG")
            .selectAll("rect")
            .data(matrix)
            .enter()
            .append("rect")
            .attr("class", "grid")
            .attr("width", 25)
            .attr("height", 25)
            .attr("x", d => d.x * 25)
            .attr("y", d => d.y * 25)
            .style("fill-opacity", d => d.weight * .2)
        // Horizontaler Text
        d3.select("svg")
            .append("g")
            .attr("transform", "translate(150,145)")
            // .attr("translate",(150,145))
            .selectAll("text")
            .data(nodes)
            .enter()
            .append("text")
            // .attr("x", (d, i) => i * 75 + 12.5)
            .attr("transform", (d, i) => {
                let x = i * 25 + 12.5;
                return "translate(" + x + ") rotate(90)";
            })
            .text(d => d.id)
            .attr("text-anchor", "end")


        d3.select("svg")
            .append("g")
            .attr("transform", "translate(145,150)")
            .selectAll("text")
            .data(nodes)
            .enter()
            .append("text")
            .attr("y", (d, i) => i * 25 + 12.5)
            .text(d => d.id)
            .style("text-anchor", "end")

        d3.selectAll("rect.grid").on("mouseover", gridOver);
        function gridOver(event, d) {
            d3.selectAll("rect").style("stroke-width", p =>
                p.x == d.x || p.y == d.y ? "4px" : "1px");
        };
    };
};
export { adjacency };